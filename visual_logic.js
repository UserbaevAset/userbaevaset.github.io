/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.8.0
 * Sun, 09 Feb 2025 18:14:54 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables used in the init tab
const _initGlob = {
    percentage: 0,
    output: {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        },
    },
};


// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];
_pGlob.htmlElements = new Set();
_pGlob.materialsCache = new Map();

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

const createPzLib = ({ v3d=null, appInstance=null }) => {
    function getElement(id, isParent=false) {
        let elem;
        if (Array.isArray(id) && id[0] === 'CONTAINER') {
            if (appInstance !== null) {
                elem = appInstance.container;
            } else if (typeof _initGlob !== 'undefined') {
                // if we are on the initialization stage, we still can have access
                // to the container element
                const contId = _initGlob.container;
                elem = isParent ? parent.document.getElementById(contId)
                        : document.getElementById(contId);
            }
        } else if (Array.isArray(id) && id[0] === 'WINDOW') {
            elem = isParent ? parent : window;
        } else if (Array.isArray(id) && id[0] === 'DOCUMENT') {
            elem = isParent ? parent.document : document;
        } else if (Array.isArray(id) && id[0] === 'BODY') {
            elem = isParent ? parent.document.body : document.body;
        } else if (Array.isArray(id) && id[0] === 'QUERYSELECTOR') {
            elem = isParent ? parent.document.querySelector(id)
                    : document.querySelector(id);
        } else {
            elem = isParent ? parent.document.getElementById(id)
                    : document.getElementById(id);
        }
        return elem;
    }
        
    function getElements(ids, isParent=false) {
        const elems = [];
        if (Array.isArray(ids) && ids[0] !== 'CONTAINER' && ids[0] !== 'WINDOW'
                && ids[0] !== 'DOCUMENT' && ids[0] !== 'BODY'
                && ids[0] !== 'QUERYSELECTOR') {
            for (let i = 0; i < ids.length; i++) {
                elems.push(getElement(ids[i], isParent));
            }
        } else {
            elems.push(getElement(ids, isParent));
        }
        return elems;
    }
        
    class MediaHTML5 {
        constructor() {
            this.source = null;
        }
    
        load(url, isVideo) {
            if (isVideo) {
                this.source = document.createElement('video');
                this.source.playsInline = true;
                this.source.preload = 'auto';
                this.source.autoload = true;
                this.source.crossOrigin = 'anonymous';
            } else {
                this.source = document.createElement('audio');
            }
    
            this.source.src = url;
            return this;
        }
    
        play() {
            this.source.play();
        }
    
        pause() {
            this.source.pause();
        }
    
        stop() {
            this.source.pause();
            this.source.currentTime = 0;
        }
    
        rewind() {
            this.source.currentTime = 0;
        }
    
        setPlaybackTime(time) {
            this.source.currentTime = time
        }
    
        getPlaybackTime() {
            return this.source.currentTime;
        }
    
        getDuration() {
            return this.source.duration;
        }
    
        setPlaybackRate(rate) {
            this.source.playbackRate = rate;
        }
    
        isPlaying() {
            return this.source.duration > 0 && !this.source.paused;
        }
    
        setLoop(looped) {
            this.source.loop = looped;
        }
    
        setVolume(volume) {
            this.source.volume = volume;
        }
    
        setMuted(muted) {
            this.source.muted = muted;
        }
    
        toPositional() {
            if (!(this.audio instanceof v3d.PositionalAudio)) {
                const posAudio = new v3d.PositionalAudio(new v3d.AudioListener());
                posAudio.setMediaElementSource(this.source);
                this.audio = posAudio;
            }
            return this.audio;
        }
    }
        
    function areListenersSame(target0, type0, listener0, optionsOrUseCapture0,
            target1, type1, listener1, optionsOrUseCapture1) {
        const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
                ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
        const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
                ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
        return target0 === target1 && type0 === type1 && listener0 === listener1
                && capture0 === capture1;
    }
        
    function bindListener(target, type, listener, optionsOrUseCapture) {
        const alreadyExists = _pGlob.eventListeners.some(elem => {
            return areListenersSame(elem.target, elem.type, elem.listener,
                    elem.optionsOrUseCapture, target, type, listener,
                    optionsOrUseCapture);
        });
    
        if (!alreadyExists) {
            target.addEventListener(type, listener, optionsOrUseCapture);
            _pGlob.eventListeners.push({ target, type, listener,
                    optionsOrUseCapture });
        }
    }
        
    function getMaterialEditableTextures(matName, collectSameNameMats=false) {
        let mats = [];
        if (collectSameNameMats) {
            mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        } else {
            const firstMat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
            if (firstMat !== null) {
                mats = [firstMat];
            }
        }
    
        const textures = mats.reduce((texArray, mat) => {
            let matTextures = [];
            switch (mat.type) {
                case 'MeshNodeMaterial':
                    matTextures = Object.values(mat.nodeTextures);
                    break;
    
                case 'MeshStandardMaterial':
                    matTextures = [
                        mat.map, mat.lightMap, mat.aoMap, mat.emissiveMap,
                        mat.bumpMap, mat.normalMap, mat.displacementMap,
                        mat.roughnessMap, mat.metalnessMap, mat.alphaMap, mat.envMap
                    ];
                    break;
    
                default:
                    console.error('getMaterialEditableTextures: Unknown material type '
                            + mat.type);
                    break;
            }
    
            Array.prototype.push.apply(texArray, matTextures);
            return texArray;
        }, []);
    
        return textures.filter(elem => {
            // check Texture type exactly
            return elem && (elem.constructor === v3d.Texture
                    || elem.constructor === v3d.CompressedTexture
                    || elem.constructor === v3d.DataTexture
                    || elem.constructor === v3d.CanvasTexture
                    || elem.constructor === v3d.VideoTexture);
        });
    }
        
    function replaceMaterialEditableTexture(mat, oldTex, newTex) {
        if (v3d.MaterialUtils.replaceTexture) {
            v3d.MaterialUtils.replaceTexture(mat, oldTex, newTex);
            return;
        }
    
        // COMPAT: <4.8, had no replaceTexture() method
        switch (mat.type) {
            case 'MeshNodeMaterial':
                // NOTE: replace in node graph as well since it's possible to texture get lost
                // after updateNodeGraph()
                mat.traverseNodes(node => {
                    if (node.originData.texture === oldTex)
                        node.originData.texture = newTex;
                });
    
                for (const name in mat.nodeTextures) {
                    if (mat.nodeTextures[name] === oldTex) {
                        mat.nodeTextures[name] = newTex;
                    }
                }
                break;
    
            case 'MeshStandardMaterial':
                const texNames = ['map', 'lightMap', 'aoMap', 'emissiveMap',
                        'bumpMap', 'normalMap', 'displacementMap', 'roughnessMap',
                        'metalnessMap', 'alphaMap', 'envMap'];
    
                texNames.forEach(name => {
                    if (mat[name] === oldTex) {
                        mat[name] = newTex;
                    }
                });
                break;
    
            default:
                console.error('replaceMaterialEditableTexture: Unsupported material type '
                        + mat.type);
                break;
        }
    
        // inherit some save params
        newTex.encoding = oldTex.encoding;
        newTex.wrapS = oldTex.wrapS;
        newTex.wrapT = oldTex.wrapT;
    }
        
    function getObjectName(obj) {
        // auto-generated from a multi-material object, use parent name instead
        if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
            return obj.parent.name;
        } else {
            return obj.name;
        }
    }
        
    function initObjectPicking(callback, eventType, mouseDownUseTouchStart=false,
            allowedMouseButtons=null) {
    
        const elem = appInstance.renderer.domElement;
        bindListener(elem, eventType, pickListener);
    
        if (eventType === 'mousedown') {
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, pickListener);
    
        } else if (eventType === 'dblclick') {
    
            let prevTapTime = 0;
    
            function doubleTapCallback(event) {
                const now = new Date().getTime();
                const timesince = now - prevTapTime;
    
                if (timesince < 600 && timesince > 0) {
                    pickListener(event);
                    prevTapTime = 0;
                    return;
                }
    
                prevTapTime = new Date().getTime();
            }
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, doubleTapCallback);
        }
    
        const raycaster = new v3d.Raycaster();
    
        function pickListener(event) {
    
            // to handle unload in loadScene puzzle
            if (!appInstance.getCamera()) {
                return;
            }
    
            event.preventDefault();
    
            let xNorm = 0;
            let yNorm = 0;
            if (event instanceof MouseEvent) {
                if (allowedMouseButtons !== null && allowedMouseButtons.indexOf(event.button) === -1) {
                    return;
                }
                xNorm = event.offsetX / elem.clientWidth;
                yNorm = event.offsetY / elem.clientHeight;
            } else if (event instanceof TouchEvent) {
                const rect = elem.getBoundingClientRect();
                xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
                yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
            }
    
            _pGlob.screenCoords.x = xNorm * 2 - 1;
            _pGlob.screenCoords.y = -yNorm * 2 + 1;
            raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
    
            const objList = [];
            appInstance.scene.traverse(obj => objList.push(obj));
    
            const intersects = raycaster.intersectObjects(objList, false);
            callback(intersects, event);
        }
    }
        
    function isObjectWorthProcessing(obj) {
        return obj.type !== 'AmbientLight' && obj.name !== '' &&
                !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
                !obj.isAuxClippingMesh;
    }
        
    function getObjectByName(objName) {
        let objFound = null;
    
        const pGlobAvailable = _pGlob !== undefined;
        if (pGlobAvailable && objName in _pGlob.objCache) {
            objFound = _pGlob.objCache[objName] || null;
        }
    
        if (objFound && objFound.name === objName) {
            return objFound;
        }
    
        if (appInstance.scene) {
            appInstance.scene.traverse(obj => {
                if (!objFound && isObjectWorthProcessing(obj) && (obj.name === objName)) {
                    objFound = obj;
                    if (pGlobAvailable) {
                        _pGlob.objCache[objName] = objFound;
                    }
                }
            });
        }
        return objFound;
    }
        
    function isObjectAmongObjects(objNameToCheck, objNames) {
        if (!objNameToCheck) {
            return false;
        }
    
        for (let i = 0; i < objNames.length; i++) {
            if (objNameToCheck === objNames[i]) {
                return true;
            } else {
                // also check children which are auto-generated for multi-material objects
                const obj = getObjectByName(objNames[i]);
                if (obj && obj.type === 'Group') {
                    for (let j = 0; j < obj.children.length; j++) {
                        if (objNameToCheck === obj.children[j].name) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
        
    function getObjectNamesByGroupName(groupName) {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                const objGroupNames = obj.groupNames;
                if (!objGroupNames) {
                    return;
                }
    
                for (let i = 0; i < objGroupNames.length; i++) {
                    const objGroupName = objGroupNames[i];
                    if (objGroupName === groupName) {
                        objNameList.push(obj.name);
                    }
                }
            }
        });
        return objNameList;
    }
        
    function getAllObjectNames() {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                objNameList.push(obj.name);
            }
        });
        return objNameList;
    }
        
    function retrieveObjectNamesAccum(currObjNames, namesAccum) {
        if (typeof currObjNames === 'string') {
            namesAccum.push(currObjNames);
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'GROUP') {
            const newObjNames = getObjectNamesByGroupName(currObjNames[1]);
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'ALL_OBJECTS') {
            const newObjNames = getAllObjectNames();
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames)) {
            for (let i = 0; i < currObjNames.length; i++) {
                retrieveObjectNamesAccum(currObjNames[i], namesAccum);
            }
        }
    }
        
    function retrieveObjectNames(objNames) {
        const accum = [];
        retrieveObjectNamesAccum(objNames, accum);
        return accum.filter(name => name !== '');
    }
        
    function getSceneAnimFrameRate(scene) {
        if (scene && 'animFrameRate' in scene.userData) {
            return scene.userData.animFrameRate;
        }
        return 24;
    }
        
    function getSceneByAction(action) {
        const root = action.getRoot();
        let scene = root.type === 'Scene' ? root : null;
        root.traverseAncestors(ancObj => {
            if (ancObj.type === 'Scene') {
                scene = ancObj;
            }
        });
        return scene;
    }
        
    function getMaterialEditableValues(matName) {
        const mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (!mat) {
            return [];
        }
    
        if (mat.isMeshNodeMaterial) {
            return Object.keys(mat.nodeValueMap);
        } else if (mat.isMeshStandardMaterial) {
            return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity',
                    'envMapIntensity'];
        } else {
            return [];
        }
    }
        
    const Tween = (function() {
    
    var _Group=function(){this._tweens={},this._tweensAddedDuringUpdate={}};_Group.prototype={getAll:function(){return Object.keys(this._tweens).map(function(t){return this._tweens[t]}.bind(this))},removeAll:function(){this._tweens={}},add:function(t){this._tweens[t.getId()]=t,this._tweensAddedDuringUpdate[t.getId()]=t},remove:function(t){delete this._tweens[t.getId()],delete this._tweensAddedDuringUpdate[t.getId()]},update:function(t,n){var e=Object.keys(this._tweens);
    if(0===e.length)return!1;for(t=void 0!==t?t:TWEEN.now();0<e.length;){this._tweensAddedDuringUpdate={};for(var i=0;i<e.length;i++){var r=this._tweens[e[i]];r&&!1===r.update(t)&&(r._isPlaying=!1,n||delete this._tweens[e[i]])}e=Object.keys(this._tweensAddedDuringUpdate)}return!0}};var TWEEN=new _Group;TWEEN.Group=_Group,TWEEN._nextId=0,TWEEN.nextId=function(){return TWEEN._nextId++},"undefined"==typeof window&&"undefined"!=typeof process&&process.hrtime?TWEEN.now=function(){var t=process.hrtime();
    return 1e3*t[0]+t[1]/1e6}:"undefined"!=typeof window&&void 0!==window.performance&&void 0!==window.performance.now?TWEEN.now=window.performance.now.bind(window.performance):void 0!==Date.now?TWEEN.now=Date.now:TWEEN.now=function(){return(new Date).getTime()},TWEEN.Tween=function(t,n){this._object=t,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._repeat=0,this._repeatDelayTime=void 0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,
    this._startTime=null,this._easingFunction=TWEEN.Easing.Linear.None,this._interpolationFunction=TWEEN.Interpolation.Linear,this._chainedTweens=[],this._onStartCallback=null,this._onStartCallbackFired=!1,this._onUpdateCallback=null,this._onCompleteCallback=null,this._onStopCallback=null,this._group=n||TWEEN,this._id=TWEEN.nextId()},TWEEN.Tween.prototype={getId:function(){return this._id},isPlaying:function(){return this._isPlaying},to:function(t,n){return this._valuesEnd=t,void 0!==n&&(this._duration=n),this},start:function(t){for(var n in this._group.add(this),this._isPlaying=!0,this._onStartCallbackFired=!1,this._startTime=void 0!==t?"string"==typeof t?TWEEN.now()+parseFloat(t):t:TWEEN.now(),this._startTime+=this._delayTime,this._valuesEnd){if(this._valuesEnd[n]instanceof Array){if(0===this._valuesEnd[n].length)continue;
    this._valuesEnd[n]=[this._object[n]].concat(this._valuesEnd[n])}void 0!==this._object[n]&&(this._valuesStart[n]=this._object[n],this._valuesStart[n]instanceof Array==!1&&(this._valuesStart[n]*=1),this._valuesStartRepeat[n]=this._valuesStart[n]||0)}return this},stop:function(){return this._isPlaying&&(this._group.remove(this),this._isPlaying=!1,null!==this._onStopCallback&&this._onStopCallback(this._object),this.stopChainedTweens()),this},end:function(){return this.update(this._startTime+this._duration),this},stopChainedTweens:function(){for(var t=0,n=this._chainedTweens.length;t<n;
    t++)this._chainedTweens[t].stop()},group:function(t){return this._group=t,this},delay:function(t){return this._delayTime=t,this},repeat:function(t){return this._repeat=t,this},repeatDelay:function(t){return this._repeatDelayTime=t,this},yoyo:function(t){return this._yoyo=t,this},easing:function(t){return this._easingFunction=t,this},interpolation:function(t){return this._interpolationFunction=t,this},chain:function(){return this._chainedTweens=arguments,this},onStart:function(t){return this._onStartCallback=t,this},onUpdate:function(t){return this._onUpdateCallback=t,this},onComplete:function(t){return this._onCompleteCallback=t,this},onStop:function(t){return this._onStopCallback=t,this},update:function(t){var n,e,i;if(t<this._startTime)return!0;
    for(n in!1===this._onStartCallbackFired&&(null!==this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),e=(t-this._startTime)/this._duration,e=0===this._duration||1<e?1:e,i=this._easingFunction(e),this._valuesEnd)if(void 0!==this._valuesStart[n]){var r=this._valuesStart[n]||0,a=this._valuesEnd[n];a instanceof Array?this._object[n]=this._interpolationFunction(a,i):("string"==typeof a&&(a="+"===a.charAt(0)||"-"===a.charAt(0)?r+parseFloat(a):parseFloat(a)),"number"==typeof a&&(this._object[n]=r+(a-r)*i))}if(null!==this._onUpdateCallback&&this._onUpdateCallback(this._object),1!==e)return!0;
    if(0<this._repeat){for(n in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat){if("string"==typeof this._valuesEnd[n]&&(this._valuesStartRepeat[n]=this._valuesStartRepeat[n]+parseFloat(this._valuesEnd[n])),this._yoyo){var s=this._valuesStartRepeat[n];this._valuesStartRepeat[n]=this._valuesEnd[n],this._valuesEnd[n]=s}this._valuesStart[n]=this._valuesStartRepeat[n]}return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=t+this._repeatDelayTime:this._startTime=t+this._delayTime,!0}null!==this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var o=0,u=this._chainedTweens.length;o<u;o++)this._chainedTweens[o].start(this._startTime+this._duration);
    return!1}},TWEEN.Easing={Linear:{None:function(t){return t}},Quadratic:{In:function(t){return t*t},Out:function(t){return t*(2-t)},InOut:function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)}},Cubic:{In:function(t){return t*t*t},Out:function(t){return--t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)}},Quartic:{In:function(t){return t*t*t*t},Out:function(t){return 1- --t*t*t*t},InOut:function(t){return(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)}},Quintic:{In:function(t){return t*t*t*t*t},Out:function(t){return--t*t*t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)}},Sinusoidal:{In:function(t){return 1-Math.cos(t*Math.PI/2)},Out:function(t){return Math.sin(t*Math.PI/2)},InOut:function(t){return.5*(1-Math.cos(Math.PI*t))}},Exponential:{In:function(t){return 0===t?0:Math.pow(1024,t-1)},Out:function(t){return 1===t?1:1-Math.pow(2,-10*t)},
    InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(2-Math.pow(2,-10*(t-1)))}},Circular:{In:function(t){return 1-Math.sqrt(1-t*t)},Out:function(t){return Math.sqrt(1- --t*t)},InOut:function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}},Elastic:{In:function(t){return 0===t?0:1===t?1:-Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)},Out:function(t){return 0===t?0:1===t?1:Math.pow(2,-10*t)*Math.sin(5*(t-.1)*Math.PI)+1},InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?-.5*Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI):.5*Math.pow(2,-10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)+1}},Back:{In:function(t){return t*t*(2.70158*t-1.70158)},Out:function(t){return--t*t*(2.70158*t+1.70158)+1},InOut:function(t){var n=2.5949095;
    return(t*=2)<1?t*t*((n+1)*t-n)*.5:.5*((t-=2)*t*((n+1)*t+n)+2)}},Bounce:{In:function(t){return 1-TWEEN.Easing.Bounce.Out(1-t)},Out:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},InOut:function(t){return t<.5?.5*TWEEN.Easing.Bounce.In(2*t):.5*TWEEN.Easing.Bounce.Out(2*t-1)+.5}}},TWEEN.Interpolation={Linear:function(t,n){var e=t.length-1,i=e*n,r=Math.floor(i),a=TWEEN.Interpolation.Utils.Linear;return n<0?a(t[0],t[1],i):1<n?a(t[e],t[e-1],e-i):a(t[r],t[e<r+1?e:r+1],i-r)},Bezier:function(t,n){for(var e=0,i=t.length-1,r=Math.pow,a=TWEEN.Interpolation.Utils.Bernstein,s=0;s<=i;s++)e+=r(1-n,i-s)*r(n,s)*t[s]*a(i,s);return e},CatmullRom:function(t,n){var e=t.length-1,i=e*n,r=Math.floor(i),a=TWEEN.Interpolation.Utils.CatmullRom;
    return t[0]===t[e]?(n<0&&(r=Math.floor(i=e*(1+n))),a(t[(r-1+e)%e],t[r],t[(r+1)%e],t[(r+2)%e],i-r)):n<0?t[0]-(a(t[0],t[0],t[1],t[1],-i)-t[0]):1<n?t[e]-(a(t[e],t[e],t[e-1],t[e-1],i-e)-t[e]):a(t[r?r-1:0],t[r],t[e<r+1?e:r+1],t[e<r+2?e:r+2],i-r)},Utils:{Linear:function(t,n,e){return(n-t)*e+t},Bernstein:function(t,n){var e=TWEEN.Interpolation.Utils.Factorial;return e(t)/e(n)/e(t-n)},Factorial:function(){var i=[1];return function(t){var n=1;if(i[t])return i[t];for(var e=t;1<e;e--)n*=e;return i[t]=n}}(),CatmullRom:function(t,n,e,i,r){var a=.5*(e-t),s=.5*(i-n),o=r*r;return(2*n-2*e+a+s)*(r*o)+(-3*n+3*e-2*a-s)*o+a*r+n}}},function(t){"function"==typeof define&&define.amd?define([],function(){return TWEEN}):"undefined"!=typeof module&&"object"==typeof exports?module.exports=TWEEN:void 0!==t&&(console.log(t),t.TWEEN=TWEEN)}(this);
    
    return TWEEN;
    })();
        
    class AudioWebAudio {
        constructor() {
            this.audio = new v3d.Audio(new v3d.AudioListener());
    
            this._muted = false;
            this._volume = 1;
        }
    
        load(url) {
            const scope = this;
    
            const xhr = new XMLHttpRequest();
            xhr.open('GET', url);
            xhr.responseType = 'arraybuffer';
    
            xhr.onload = function(e) {
                if (this.status === 200) {
                    // new promise-based syntax is not currently supported in Safari
                    scope.audio.context.decodeAudioData(this.response, function(decodedData) {
                        scope.audio.setBuffer(decodedData);
                    });
                }
            }
    
            xhr.send();
            return this;
        }
    
        play() {
            if (this.audio.buffer === null) return;
            this.audio.play();
        }
    
        pause() {
            this.audio.pause();
        }
    
        stop() {
            if (this.audio.buffer === null || this.audio.source === null) return;
            this.audio.stop();
        }
    
        rewind() {
            if (this.audio.buffer === null || this.audio.source === null) return;
    
            const isPlaying = this.audio.isPlaying;
            this.audio.stop();
            if (isPlaying) {
                this.audio.play();
            }
        }
    
        setPlaybackTime(time) {
            // TODO: not easy with WebAudio
        }
    
        getPlaybackTime() {
            // TODO: not easy with WebAudio
            return 0;
        }
    
        getDuration() {
            return (this.audio.buffer === null) ? 0 : this.audio.buffer.duration;
        }
    
        setPlaybackRate(rate) {
            this.audio.setPlaybackRate(rate);
        }
    
        isPlaying() {
            return this.audio.isPlaying;
        }
    
        setLoop(looped) {
            this.audio.setLoop(looped);
        }
    
        setVolume(volume) {
            this._volume = volume;
            if (!this._muted) {
                this.audio.setVolume(volume);
            }
        }
    
        setMuted(muted) {
            this._muted = muted;
            this.audio.setVolume(muted ? 0 : this._volume);
        }
    
        toPositional() {
            if (!(this.audio instanceof v3d.PositionalAudio)) {
                const posAudio = new v3d.PositionalAudio(this.audio.listener);
                posAudio.fromAudio(this.audio);
                this.audio = posAudio;
            }
            return this.audio;
        }
    }
        
    function transformCoordsSpace(coords, spaceFrom, spaceTo, noSignChange=false) {
    
        if (spaceFrom === spaceTo) {
            return coords;
        }
    
        const y = coords.y;
        const z = coords.z;
    
        if (spaceFrom === 'Z_UP_RIGHT' && spaceTo === 'Y_UP_RIGHT') {
            coords.y = z;
            coords.z = noSignChange ? y : -y;
        } else if (spaceFrom === 'Y_UP_RIGHT' && spaceTo === 'Z_UP_RIGHT') {
            coords.y = noSignChange ? z : -z;
            coords.z = y;
        } else {
            console.error('transformCoordsSpace: Unsupported coordinate space');
        }
    
        return coords;
    }
        
    function getSceneCoordSystem() {
        const scene = appInstance.scene;
        if (scene && 'coordSystem' in scene.userData) {
            return scene.userData.coordSystem;
        }
    
        return 'Y_UP_RIGHT';
    }
        
    function getMaterialEditableColors(matName) {
        const mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (!mat) {
            return [];
        }
    
        if (mat.isMeshNodeMaterial) {
            return Object.keys(mat.nodeRGBMap);
        } else if (mat.isMeshStandardMaterial) {
            return ['color', 'emissive'];
        } else {
            return [];
        }
    }

    return {
        getElements, getElement, MediaHTML5, bindListener,
        getMaterialEditableTextures, replaceMaterialEditableTexture, getObjectName, initObjectPicking,
        isObjectAmongObjects, retrieveObjectNames, getSceneAnimFrameRate, getSceneByAction,
        getObjectByName, getMaterialEditableValues, Tween, AudioWebAudio,
        transformCoordsSpace, getSceneCoordSystem, getMaterialEditableColors,
    };
};

var PL = {};



// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    const PzLib = createPzLib({ v3d });

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var wheels_rotation, loaded;

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// setInterval puzzle
function registerInterval(timeout, callback) {
    var timerId = window.setInterval(function() { callback(timerId) }, 1000 * timeout);
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// domObjectCall puzzle
function domObjectCallElement(method, id, isParent, data) {
    let elem = PzLib.getElement(id, isParent);
    if (!elem) {
        // do not clutter console with errors when accessing elements in parent frame
        if (!isParent)
            console.error('puzzle call method: Invalid element');
        return;
    }

    switch (method) {
    case 'BLUR':
        elem.blur();
        break;
    case 'CLICK':
        elem.click();
        break;
    case 'CLOSE':
        elem.close();
        break;
    case 'SHOW':
        elem.show();
        break;
    case 'SHOW_MODAL':
        elem.showModal();
        break;
    case 'FOCUS':
        elem.focus();
        break;
    case 'POST_MESSAGE':
        // allow posting to iframe elements directly
        const win = (elem.contentWindow !== undefined) ? elem.contentWindow : elem;
        if (win && win.postMessage)
            win.postMessage(data, '*');
        else if (!isParent)
            console.error('puzzle call method: Invalid element');
        break;
    }
}


wheels_rotation = 0;
loaded = false;

registerInterval(0.01, function() {
  if (loaded == false) {
    setHTMLElemStyle('transform', ['rotate(',wheels_rotation,'deg)'].join(''), 'preloader_scooter_wheel_1', true);
    setHTMLElemStyle('transform', ['rotate(',wheels_rotation,'deg)'].join(''), 'preloader_scooter_wheel_2', true);
    wheels_rotation = wheels_rotation + 5;
  }
});


// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  // setHTMLElemStyle('marginLeft', String(Math.round(_initGlob.percentage) - 100) + '%', 'preloader_scooter_body', true);
  if (Math.round(_initGlob.percentage) < 30) {
    setHTMLElemAttribute('innerHTML', 'Загрузка модели...', 'loading_text', true);
  } else if (Math.round(_initGlob.percentage) < 90) {
    setHTMLElemAttribute('innerHTML', 'Подготовка сцены...', 'loading_text', true);
  } else if (Math.round(_initGlob.percentage) >= 90) {
    setHTMLElemAttribute('innerHTML', 'Загрузка текстур...', 'loading_text', true);
    registerSetTimeout(2, function() {
      setHTMLElemAttribute('innerHTML', 'Компиляция шейдеров...', 'loading_text', true);
      registerSetTimeout(2, function() {
        setHTMLElemAttribute('innerHTML', 'Please wait...', 'loading_text', true);
      });
    });
  }
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', true);
  loaded = true;
})();
};

domObjectCallElement('FOCUS', ['QUERYSELECTOR', 'iframe'], true, undefined);

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

const PzLib = createPzLib({ v3d, appInstance });

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["freez-unfreez"] = freez_unfreez;
this.procedures["bloom_optimization"] = bloom_optimization;
this.procedures["reset_boarder"] = reset_boarder;
this.procedures["changing_carpaint"] = changing_carpaint;

var video, bb, camera_moving, init_app, right_panels_list, right_panel_hidden, serie_name, amount_of_buttons, current_button, carpaint_animating, Color_1, Color_2, metallic, pointness, roughness, front_carrier_installed, br, mouse_down, current_right_panel, left_panel_hidden, i, current_carpaint_params, texture_loading, backpack_1_installed, bl, dashboar_animating, markers_visible, new_carpaint_params, environment, backpack_2_installed, fl, camera, bloom_enabled, bloom_threshhold, bloom_strength, bloom_radius, leather_parts_list, carriers_list, fr, back_lights_on, back_footboard_moved, front_lights_on, side_lights_on, dashboard_switcher_current, carbon_1, carbon_2, side_footboard_moved, dashboard_switcher_new;

// loadVideo puzzle
function loadVideo(url) {
    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new PzLib.MediaHTML5().load(url, true);
    }
    return elems[url];
}

// replaceTexture puzzle
function replaceTexture(matName, texName, texUrlOrElem, doCb) {

    const textures = PzLib.getMaterialEditableTextures(matName, true).filter(function(elem) {
        return elem.name == texName;
    });

    if (!textures.length)
        return;

    const mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    if (texUrlOrElem instanceof Promise) {

        texUrlOrElem.then(function(response) {
           processImageUrl(response);
        }, function(error) {});

    } else if (typeof texUrlOrElem == 'string') {

        processImageUrl(texUrlOrElem);

    /**
     * NOTE: not checking for the PzLib.MediaHTML5 constructor, because otherwise this
     * puzzle would always provide the code that's not needed most of the time
     */
    } else if (texUrlOrElem instanceof Object && texUrlOrElem.source
            instanceof HTMLVideoElement) {

        processVideo(texUrlOrElem.source);

    } else if (texUrlOrElem instanceof HTMLCanvasElement) {

        processCanvas(texUrlOrElem);

    } else {

        return;

    }

    function processImageUrl(url) {

        const isHDR = (url.search(/\.hdr$/) > 0);
        const isComp = (url.search(/\.ktx2/) > 0);

        let isCompOld = false;
        let isVideoOld = false;
        textures.forEach(function(elem) {
            if (elem.isCompressedTexture)
                isCompOld = true;
            if (elem.isVideoTexture)
                isVideoOld = true;
        });

        let loader;

        if (!isHDR && !isComp && !isCompOld && !isVideoOld) {
            loader = new v3d.ImageLoader();
            loader.setCrossOrigin('Anonymous');
        } else if (isComp) {
            loader = appInstance.loader.ktx2Loader;
            loader.setCrossOrigin('Anonymous');
        } else if (isCompOld || isVideoOld) {
            loader = new v3d.TextureLoader();
            loader.setCrossOrigin('Anonymous');
        } else {
            loader = new v3d.FileLoader();
            loader.setResponseType('arraybuffer');
        }

        loader.load(url, function(loadedData) {

            textures.forEach(function(elem) {

                elem.dispose();

                if (!isHDR && !isComp && !isCompOld && !isVideoOld) {

                    elem.image = loadedData;

                } else if (isComp || isCompOld || isVideoOld) {

                    mats.forEach(function(mat) {
                        loadedData.flipY = false;
                        loadedData.name = texName;
                        PzLib.replaceMaterialEditableTexture(mat, elem, loadedData);
                        mat.needsUpdate = true;
                    });

                } else {

                    // parse loaded HDR buffer
                    var rgbeLoader = new v3d.RGBELoader();
                    var texData = rgbeLoader.parse(loadedData);

                    elem.image = {
                        data: texData.data,
                        width: texData.width,
                        height: texData.height
                    }

                    elem.magFilter = v3d.LinearFilter;
                    elem.minFilter = v3d.LinearFilter;
                    elem.generateMipmaps = false;
                    elem.isDataTexture = true;
                }

                // update world material if it is using this texture
                if (appInstance.scene !== null && appInstance.scene.worldMaterial !== null) {
                    var wMat = appInstance.scene.worldMaterial;
                    for (let texName in wMat.nodeTextures) {
                        if (wMat.nodeTextures[texName] == elem) {
                            appInstance.updateEnvironment(wMat);
                        }
                    }
                }
            });

            // exec once
            doCb();

        });
    }

    function processVideo(elem) {
        const videoTex = new v3d.VideoTexture(elem);
        videoTex.flipY = false;
        videoTex.name = texName;

        let videoAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                PzLib.replaceMaterialEditableTexture(mat, tex, videoTex);
            });

            mat.needsUpdate = true;
            // HACK: to assign new encoding in nodes, workaround for https://crbug.com/1256340
            // HACK: preserve links to uniform arrays which got replaced in updateNodeGraph()
            if (mat.isMeshNodeMaterial) {
                const nodeRGBArrSave = mat.nodeRGBArr;
                const nodeValueSave = mat.nodeValue;
                mat.updateNodeGraph();
                mat.nodeRGBArr = nodeRGBArrSave;
                mat.nodeValue = nodeValueSave;
            }

            videoAssigned = true;
        });

        if (videoAssigned) {
            if (elem.readyState < 1) {
                PzLib.bindListener(elem, 'loadedmetadata', doCb);
            } else {
                doCb();
            }
        }

    }

    function processCanvas(elem) {
        const canvasTex = new v3d.CanvasTexture(elem);
        canvasTex.flipY = false;
        canvasTex.name = texName;

        let canvasAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                PzLib.replaceMaterialEditableTexture(mat, tex, canvasTex);
            });

            mat.needsUpdate = true;
            canvasAssigned = true;
        });

        if (canvasAssigned) {

            if (PL) {
                PL.canvasTextures = PL.canvasTextures || {};
                PL.canvasTextures[canvasTex.image.id] = canvasTex;
            }

            doCb();
        }

    }
}

// playSound puzzle
function playSound(mediaElem, loop) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);
    mediaElems.forEach(mediaElem => {
        mediaElem.setLoop(loop);
        if (mediaElem.audio)
            mediaElem.audio.context.resume();
        mediaElem.play();
    });
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    PzLib.initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);
            var objNames = PzLib.retrieveObjectNames(objSelector);

            if (PzLib.isObjectAmongObjects(objName, objNames)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            PzLib.bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = PzLib.getSceneByAction(action);
                var frameRate = PzLib.getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = PzLib.getSceneByAction(action);
            var frameRate = PzLib.getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// setActiveCamera puzzle
function setActiveCamera(camName) {
    var camera = PzLib.getObjectByName(camName);
    if (!camera || !camera.isCamera || appInstance.getCamera() == camera)
        return;
    appInstance.setCamera(camera);
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        PzLib.bindListener(elem, eventType, callback);
    }
}

// getAnimations puzzle
function getAnimations(objSelector) {
    const objNames = PzLib.retrieveObjectNames(objSelector);

    const animations = [];
    for (let i = 0; i < objNames.length; i++) {
        const objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        const action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}

// isAnimationPlaying puzzle
function isAnimationPlaying(animations) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];
    for (let i = 0; i < animations.length; i++) {
        const animName = animations[i];
        if (!animName)
            continue;
        const action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (action && action.isRunning())
            return true;
    }
    return false;
}

// Describe this function...
function freez_unfreez() {
  if (init_app || carpaint_animating || camera_moving || isAnimationPlaying(getAnimations(['ALL_OBJECTS'])) || mouse_down || texture_loading || dashboar_animating) {
  } else {
  }
}

// whenMoved puzzle
function whenMoved(objSelector, velocity, cbStart, cbMove, cbStop) {

    _pGlob.objMovementInfos = _pGlob.objMovementInfos || {};

    function savePreviousCoords(objName, obj, prevIsMoving) {
        // GC optimization
        if (_pGlob.objMovementInfos[objName]) {
            var info = _pGlob.objMovementInfos[objName];

            info.prevPosX = obj.position.x;
            info.prevPosY = obj.position.y;
            info.prevPosZ = obj.position.z;
            info.prevRotX = obj.rotation.x;
            info.prevRotY = obj.rotation.y;
            info.prevRotZ = obj.rotation.z;
            info.prevScaX = obj.scale.x;
            info.prevScaY = obj.scale.y;
            info.prevScaZ = obj.scale.z;
            info.prevIsMoving = prevIsMoving;
        } else {
            var info = {
                prevPosX: obj.position.x,
                prevPosY: obj.position.y,
                prevPosZ: obj.position.z,
                prevRotX: obj.rotation.x,
                prevRotY: obj.rotation.y,
                prevRotZ: obj.rotation.z,
                prevScaX: obj.scale.x,
                prevScaY: obj.scale.y,
                prevScaZ: obj.scale.z,
                prevIsMoving: prevIsMoving
            };
            _pGlob.objMovementInfos[objName] = info;
        }

        return info;
    }

    function checkMoving(objName, obj, elapsed) {

        var info = _pGlob.objMovementInfos[objName] ||
            savePreviousCoords(objName, obj, false);

        var delta = velocity * elapsed;

        var isMoving =
            Math.abs(obj.position.x - info.prevPosX) > delta ||
            Math.abs(obj.position.y - info.prevPosY) > delta ||
            Math.abs(obj.position.z - info.prevPosZ) > delta ||
            Math.abs(obj.rotation.x - info.prevRotX) > delta ||
            Math.abs(obj.rotation.y - info.prevRotY) > delta ||
            Math.abs(obj.rotation.z - info.prevRotZ) > delta ||
            Math.abs(obj.scale.x - info.prevScaX) > delta ||
            Math.abs(obj.scale.y - info.prevScaY) > delta ||
            Math.abs(obj.scale.z - info.prevScaZ) > delta;

        if (!info.prevIsMoving && isMoving) {
            cbStart(objName);
            savePreviousCoords(objName, obj, true);
        } else if (info.prevIsMoving && isMoving) {
            cbMove(objName);
            savePreviousCoords(objName, obj, true);
        } else if (info.prevIsMoving && !isMoving) {
            cbStop(objName);
            savePreviousCoords(objName, obj, false);
        } else {
            savePreviousCoords(objName, obj, false);
        }
    }

    function addToRender(objSelector) {

        function renderCb(elapsed, timeline) {

            var objNames = PzLib.retrieveObjectNames(objSelector);

            for (var i = 0; i < objNames.length; i++) {
                var objName = objNames[i];

                var obj = PzLib.getObjectByName(objName);
                if (!obj)
                    return;

                checkMoving(objName, obj, elapsed);
            }
        }

        appInstance.renderCallbacks.push(renderCb);
        if (PL.editorRenderCallbacks)
            PL.editorRenderCallbacks.push([appInstance, renderCb]);

    }

    addToRender(objSelector);

}

// everyFrame puzzle
function registerEveryFrame(callback) {
    if (typeof callback == 'function') {
        appInstance.renderCallbacks.push(callback);
        if (PL.editorRenderCallbacks)
            PL.editorRenderCallbacks.push([appInstance, callback]);
    }
}

// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = PzLib.getMaterialEditableValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}

// animateParam puzzle
function tweenUpdateCb() {
    PzLib.Tween.update();
}
appInstance.renderCallbacks.push(tweenUpdateCb);
if (PL.editorRenderCallbacks)
    PL.editorRenderCallbacks.push([appInstance, tweenUpdateCb]);

// animateParam puzzle
_pGlob.animateParamUpdate = 0;
_pGlob.animateParamTweenInstance = {};

function animateParam(from, to, duration, easing, easing2, repeat, yoyo, blockId, on_update, when_finished) {

    var mode = easing == "Linear" ?
        PzLib.Tween.Easing.Linear.None : PzLib.Tween.Easing[easing][easing2];

    var tweenObject = (typeof from != "number");

    if (!tweenObject) { // number
        from = [from];
        to = [to];
    }

    const tween = new PzLib.Tween.Tween(from)
                    .to(to, duration * 1000)
                    .easing(mode)
                    .repeat(repeat)
                    .yoyo(yoyo)
                    .onUpdate(function (object) {
                        if (tweenObject)
                            _pGlob.animateParamUpdate = object;
                        else // number
                            _pGlob.animateParamUpdate = object[0];
                        on_update();
                    })
                    .onComplete(function (object) {
                        when_finished();
                    })
                    .start();

    _pGlob.animateParamTweenInstance[blockId] = tween;
}

// loadMedia puzzle
function loadMedia_WebAudio(url) {
    if (!v3d.Detector.checkWebAudio()) {
        if (!_pGlob.noWebAudioReported) {
            _pGlob.noWebAudioReported = true;
            console.warn('puzzles: Web Audio API not supported');
        }
        return null;
    }

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new PzLib.AudioWebAudio().load(url);
    }
    return elems[url];
}

// pauseSound puzzle
function pauseSound(mediaElem) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);
    mediaElems.forEach(mediaElem => {
        mediaElem.pause();
    });
}

// featureAvailable puzzle
function featureAvailable(feature) {

    var userAgent = window.navigator.userAgent;
    var platform = window.navigator.platform;

    switch (feature) {
    case 'MOBILE':
        return (/Android|webOS|BlackBerry/i.test(userAgent) || v3d.Detector.checkIOS());

    case 'ANDROID':
        return /Android/i.test(userAgent);
    case 'IOS':
        return v3d.Detector.checkIOS();
    case 'WINDOWS':
        return ['Win32', 'Win64', 'Windows', 'WinCE'].indexOf(platform) !== -1;
    case 'MACOS':
        return (['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].indexOf(platform) !== -1 && !v3d.Detector.checkIOS());
    case 'CHROMEOS':
        return /(CrOS)/.test(userAgent);
    case 'LINUX':
        return /Linux/.test(platform);

    case 'CHROME':
        // Chromium based
        return (!!window.chrome && !/Edge/.test(navigator.userAgent));
    case 'FIREFOX':
        return /Firefox/.test(navigator.userAgent);
    case 'IE':
        return /Trident/.test(navigator.userAgent);
    case 'EDGE':
        return /Edge/.test(navigator.userAgent);
    case 'SAFARI':
        return (/Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent));

    case 'TOUCH':
        return v3d.Detector.isTouchDevice();
    case 'RETINA':
        return window.devicePixelRatio >= 2;
    case 'HDR':
        return appInstance.useHDR;
    case 'WEBAUDIO':
        return v3d.Detector.checkWebAudio();
    case 'WEBGL':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl')
        return !!gl;
    case 'WEBGL2':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl2')
        return !!gl;
    case 'WOOCOMMERCE':
        var woo_fun = window.parent.v3d_woo_get_product_info || window.parent.parent.v3d_woo_get_product_info;
        return !!woo_fun;
    case 'DO_NOT_TRACK':
        if (navigator.doNotTrack == '1' || window.doNotTrack == '1')
            return true;
        else
            return false;
    default:
        return false;
    }

}

// bloom puzzle
function bloom(threshold, strength, radius) {
    appInstance.enablePostprocessing([{
        type: 'bloom',
        threshold: threshold,
        strength: strength,
        radius: radius
    }]);
}

// removePostprocessing puzzle
function removePostprocessing(mode) {
    if (mode == 'PUZZLES') {
        // keep outline and ambient occlusion
        appInstance.disablePostprocessing(true, true);
    } else if (mode == 'ALL') {
        appInstance.disablePostprocessing(false, false);
    }
}

// Describe this function...
function bloom_optimization() {
  if (back_lights_on == true || front_lights_on == true || side_lights_on == true) {
    bloom(bloom_threshhold, bloom_strength, bloom_radius);
    bloom_enabled = true;
  } else if (back_lights_on == false && front_lights_on == false && side_lights_on == false) {
    removePostprocessing('PUZZLES');
    bloom_enabled = false;
  }
}

// getHTMLElemAttribute puzzle
function getHTMLElemAttribute(attr, id, isParent) {
    var elem = PzLib.getElement(id, isParent);
    return elem ? elem[attr]: '';
}

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = PzLib.transformCoordsSpace(worldPos,
                PzLib.getSceneCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = PzLib.getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = PzLib.transformCoordsSpace(worldTarget,
                PzLib.getSceneCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = PzLib.getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// initFullscreen puzzle
function initFullscreen(id, isParent, cb_enter, cb_exit, cb_unavail) {
    var elem = PzLib.getElement(id, isParent);
    if (!elem)
        return;
    var doc = isParent ? parent.document: document;
    if (!(doc.fullscreenEnabled ||
        doc.webkitFullscreenEnabled ||
        doc.mozFullScreenEnabled ||
        doc.msFullscreenEnabled)) {
            cb_unavail();
            return;
    }

    function fullscreenClickCb() {
        event.stopPropagation();
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement) {
            exitFullscreen();
        } else {
            requestFullscreen(doc.body);
        }
    }
    PzLib.bindListener(elem, 'click', fullscreenClickCb);

    function changeFullscreen(event) {
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement)
            cb_enter(event);
        else
            cb_exit(event);
    }

    PzLib.bindListener(doc, 'webkitfullscreenchange', changeFullscreen);
    PzLib.bindListener(doc, 'mozfullscreenchange', changeFullscreen);
    PzLib.bindListener(doc, 'msfullscreenchange', changeFullscreen);
    PzLib.bindListener(doc, 'fullscreenchange', changeFullscreen);

    function requestFullscreen(fselem) {
        if (fselem.requestFullscreen)
            fselem.requestFullscreen();
        else if (fselem.mozRequestFullScreen)
            fselem.mozRequestFullScreen();
        else if (fselem.webkitRequestFullscreen)
            fselem.webkitRequestFullscreen();
        else if (fselem.msRequestFullscreen)
            fselem.msRequestFullscreen();
    }
    function exitFullscreen() {
        if (doc.exitFullscreen)
            doc.exitFullscreen();
        else if (doc.mozCancelFullScreen)
            doc.mozCancelFullScreen();
        else if (doc.webkitExitFullscreen)
            doc.webkitExitFullscreen();
        else if (doc.msExitFullscreen)
            doc.msExitFullscreen();
    }
}

// Describe this function...
function reset_boarder(serie_name, amount_of_buttons, current_button) {
  var i_inc = 1;
  if (1 > amount_of_buttons) {
    i_inc = -i_inc;
  }
  for (let i = 1; i_inc >= 0 ? i <= amount_of_buttons : i >= amount_of_buttons; i += i_inc) {
    if (environment == 'white') {
      setHTMLElemStyle('borderColor', '#2c2c2c', [serie_name,'_',i].join(''), true);
    } else if (environment == 'black') {
      setHTMLElemStyle('borderColor', '#cccccc', [serie_name,'_',i].join(''), true);
    }
  }
  setHTMLElemStyle('borderColor', '#f22', [serie_name,'_',current_button].join(''), true);
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// setMaterialColor puzzle
function setMaterialColor(matName, colName, r, g, b, cssCode) {

    var colors = PzLib.getMaterialEditableColors(matName);

    if (colors.indexOf(colName) < 0)
        return;

    if (cssCode) {
        var color = new v3d.Color(cssCode);
        r = color.r;
        g = color.g;
        b = color.b;
    }

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var rgbIdx = mat.nodeRGBMap[colName];
            mat.nodeRGB[rgbIdx].x = r;
            mat.nodeRGB[rgbIdx].y = g;
            mat.nodeRGB[rgbIdx].z = b;
        } else {
            mat[colName].r = r;
            mat[colName].g = g;
            mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}

// Describe this function...
function changing_carpaint(Color_1, Color_2, metallic, pointness, roughness) {
  new_carpaint_params[0] = Color_1[0];
  new_carpaint_params[1] = Color_1[1];
  new_carpaint_params[2] = Color_1[2];
  new_carpaint_params[3] = Color_2[0];
  new_carpaint_params[4] = Color_2[1];
  new_carpaint_params[5] = Color_2[2];
  new_carpaint_params[6] = metallic;
  new_carpaint_params[7] = pointness;
  new_carpaint_params[8] = roughness;

  animateParam(current_carpaint_params, new_carpaint_params, 0.5, 'Linear', 'InOut', 0, false, ':X.W1PZ=2Hr-PCLK`b[}',
      function() {
    carpaint_animating = true;
    setMaterialColor('carpaint', 'Map #163_Color_1', (_pGlob.animateParamUpdate || 0)[0], (_pGlob.animateParamUpdate || 0)[1], (_pGlob.animateParamUpdate || 0)[2], '');
    setMaterialColor('carpaint', 'Map #162_Color_1', (_pGlob.animateParamUpdate || 0)[3], (_pGlob.animateParamUpdate || 0)[4], (_pGlob.animateParamUpdate || 0)[5], '');
    setMaterialValue('carpaint', 'Map #164_MixAmount', (_pGlob.animateParamUpdate || 0)[6]);
    setMaterialValue('carpaint', 'Map #159_Multiplier', (_pGlob.animateParamUpdate || 0)[7]);
    setMaterialValue('carpaint', 'carpaint_base_Coating_Roughness', (_pGlob.animateParamUpdate || 0)[8]);
  },
      function() {
    carpaint_animating = false;
  });

      }

// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    const styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (let i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        let cssRules;
        try {
            cssRules = styles[i].cssRules;
        }
        catch (e) { continue; }

        for (let j = 0; j < cssRules.length; j++) {
            const cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.media && cssRule.media.mediaText == mediaRule) {
                const cssRulesMedia = cssRule.cssRules;
                for (let k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}


video = loadVideo('images/yellow_fish.mp4');
registerOnClick('007-0-7', false, false, [0,1,2], function() {
  replaceTexture('Material #273', 'Map #177', video, function() {});
  playSound(video, true);
}, function() {});


operateAnimation('STOP', 'bb', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', 'bl', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', 'br', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', 'fl', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', 'fr', null, null, 'AUTO', 1,
        function() {}, false);


bb = false;
br = false;
bl = false;
fl = false;
fr = false;
camera = false;

eventHTMLElem('click', 'carbon_1', true, function(event) {
  if (camera == false) {
    setActiveCamera('PhysCamera002');
    camera = true;
  } else if (camera == true) {
    setActiveCamera('PhysCamera001');
    camera = false;
  }
});

camera_moving = false;
mouse_down = false;
texture_loading = false;
bloom_enabled = false;
bloom_threshhold = 15;
bloom_strength = 0.3;
bloom_radius = 0.5;
side_lights_on = false;
back_lights_on = false;
front_lights_on = false;
side_footboard_moved = false;
back_footboard_moved = false;
dashboard_switcher_current = 0;
dashboard_switcher_new = 0;

init_app = true;

whenMoved('PhysCamera001', 0.001, function() {
  camera_moving = true;
}, function() {}, function() {
  camera_moving = false;
});

registerEveryFrame(function() {
  freez_unfreez();
});

registerOnClick('trigger_engine_swithcer', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_engine_swithcer', null, null, 'AUTO', 1,
          function() {}, false);

      dashboar_animating = true;
  if (dashboard_switcher_current == 0) {

    animateParam(0, 1, 1, 'Linear', 'InOut', 0, false, '=zRYH@n88SYQHc6-Kx:H',
        function() {
      setMaterialValue('dashboard', 'engine_switcher_MixAmount', _pGlob.animateParamUpdate || 0);
    },
        function() {
      dashboar_animating = false;
    });

        dashboard_switcher_current = 1;
    playSound(loadMedia_WebAudio('./sounds/engine_loop.mp3'), true);
  } else if (dashboard_switcher_current == 1) {

    animateParam(1, 0, 0.5, 'Linear', 'InOut', 0, false, '~wTiNxS7~50wn;|uA6k`',
        function() {
      setMaterialValue('dashboard', 'engine_switcher_MixAmount', _pGlob.animateParamUpdate || 0);
    },
        function() {
      dashboar_animating = false;
    });

        dashboard_switcher_current = 0;
    pauseSound(loadMedia_WebAudio('./sounds/engine_loop.mp3'));
  }
}, function() {});

eventHTMLElem('mousedown', ['DOCUMENT'], true, function(event) {
  mouse_down = true;
});

registerOnClick('bb', false, false, [0,1,2], function() {
  if (bb == false) {

    operateAnimation('PLAY', 'bb', 0, 120, 'LoopOnce', 1,
            function() {
      bb = true;
    }, false);

        } else if (bb == true) {

    operateAnimation('PLAY', 'bb', 0, 120, 'AUTO', 1,
            function() {
      bb = false;
    }, true);

        }
}, function() {});
registerOnClick('bl', false, false, [0,1,2], function() {
  if (bl == false) {

    operateAnimation('PLAY', 'bl', 0, 120, 'LoopOnce', 1,
            function() {
      bl = true;
    }, false);

        } else if (bl == true) {

    operateAnimation('PLAY', 'bl', 0, 120, 'AUTO', 1,
            function() {
      bl = false;
    }, true);

        }
}, function() {});
registerOnClick('br', false, false, [0,1,2], function() {
  if (br == false) {

    operateAnimation('PLAY', 'br', 0, 120, 'LoopOnce', 1,
            function() {
      br = true;
    }, false);

        } else if (br == true) {

    operateAnimation('PLAY', 'br', 0, 120, 'AUTO', 1,
            function() {
      br = false;
    }, true);

        }
}, function() {});
registerOnClick('fl', false, false, [0,1,2], function() {
  if (fl == false) {

    operateAnimation('PLAY', 'fl', 0, 120, 'LoopOnce', 1,
            function() {
      fl = true;
    }, false);

        } else if (fl == true) {

    operateAnimation('PLAY', 'fl', 0, 120, 'AUTO', 1,
            function() {
      fl = false;
    }, true);

        }
}, function() {});
registerOnClick('fr', false, false, [0,1,2], function() {
  if (fr == false) {

    operateAnimation('PLAY', 'fr', 0, 120, 'LoopOnce', 1,
            function() {
      fr = true;
    }, false);

        } else if (fr == true) {

    operateAnimation('PLAY', 'fr', 0, 120, 'AUTO', 1,
            function() {
      fr = false;
    }, true);

        }
}, function() {});

registerOnClick('trigger_seat_unlock', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_seat_unlock', null, null, 'LoopOnce', 1,
          function() {}, false);

      playSound(loadMedia_WebAudio('./sounds/seat_opening.mp3'), false);

  operateAnimation('PLAY', 'seat', null, null, 'LoopOnce', 1,
          function() {

    operateAnimation('PLAY', 'trigger_seat_lock', null, null, 'LoopOnce', 1,
            function() {}, false);

        }, false);

      }, function() {});

if (featureAvailable('HDR') == false) {
  setMaterialValue('Verge3D_Environment', 'environment_color_correction_Brightness', 5);
}

eventHTMLElem('mouseup', ['DOCUMENT'], true, function(event) {
  mouse_down = false;
});

registerOnClick('trigger_seat_lock', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_seat_lock', 0, 10, 'LoopOnce', 1,
          function() {}, true);

      playSound(loadMedia_WebAudio('./sounds/seat_closing.mp3'), false);

  operateAnimation('PLAY', 'seat', 0, 34, 'LoopOnce', 1,
          function() {

    operateAnimation('PLAY', 'trigger_seat_unlock', 0, 10, 'LoopOnce', 1,
            function() {}, true);

        }, true);

      }, function() {});

registerOnClick('trigger_back_footboard', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_back_footboard', null, null, 'AUTO', 1,
          function() {}, false);

      if (back_footboard_moved == false) {
    playSound(loadMedia_WebAudio('./sounds/footboard_release.mp3'), false);

    operateAnimation('PLAY', 'back_footboard', null, null, 'AUTO', 1,
            function() {
      back_footboard_moved = true;
    }, false);

        } else if (back_footboard_moved == true) {
    playSound(loadMedia_WebAudio('./sounds/footboard_setback.mp3'), false);

    operateAnimation('PLAY', 'back_footboard', 0, 24, 'AUTO', 1,
            function() {
      back_footboard_moved = false;
    }, true);

        }
}, function() {});

if (getHTMLElemAttribute('offsetHeight', 'container', false) / getHTMLElemAttribute('offsetWidth', 'container', false) < 1) {
  tweenCamera('camera_horizontal', 'Empty', 0, function() {}, 0);
} else if (getHTMLElemAttribute('offsetHeight', 'container', false) / getHTMLElemAttribute('offsetWidth', 'container', false) >= 1) {
  tweenCamera('camera_vertical', 'Empty', 0, function() {}, 0);
}

registerOnClick('trigger_horn', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_horn', null, null, 'AUTO', 1,
          function() {}, false);

      playSound(loadMedia_WebAudio('./sounds/horn.mp3'), false);
}, function() {});

registerOnClick('trigger_front_lights', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_front_lights', null, null, 'AUTO', 1,
          function() {}, false);

      if (front_lights_on == false) {
    playSound(loadMedia_WebAudio('./sounds/light_on.mp3'), false);
    setMaterialValue('front_lamps', 'front_lamps_Emission', 100);
    setMaterialValue('front_reflectors', 'Map #113_MixAmount', 100);
    front_lights_on = true;
    bloom_optimization();
  } else if (front_lights_on == true) {
    playSound(loadMedia_WebAudio('./sounds/light_off.mp3'), false);
    setMaterialValue('front_lamps', 'front_lamps_Emission', 0);
    setMaterialValue('front_reflectors', 'Map #113_MixAmount', 0);
    front_lights_on = false;
    bloom_optimization();
  }
}, function() {});

registerOnClick('trigger_back_lights', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_back_lights', null, null, 'AUTO', 1,
          function() {}, false);

      if (back_lights_on == false) {
    playSound(loadMedia_WebAudio('./sounds/light_on.mp3'), false);
    setMaterialValue('back_lamps', 'back_lamps_Emission', 100);
    setMaterialValue('red_lamp', 'red_lamp_Emission', 100);
    setMaterialValue('red_reflector', 'Map #113_MixAmount', 100);
    setMaterialValue('back_reflectors', 'Map #113_MixAmount', 100);
    back_lights_on = true;
    bloom_optimization();
  } else if (back_lights_on == true) {
    playSound(loadMedia_WebAudio('./sounds/light_off.mp3'), false);
    setMaterialValue('back_lamps', 'back_lamps_Emission', 0);
    setMaterialValue('red_lamp', 'red_lamp_Emission', 0);
    setMaterialValue('red_reflector', 'Map #113_MixAmount', 0);
    setMaterialValue('back_reflectors', 'Map #113_MixAmount', 0);
    back_lights_on = false;
    bloom_optimization();
  }
}, function() {});

registerOnClick('trigger_side_lights', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_side_lights', null, null, 'AUTO', 1,
          function() {}, false);

      if (side_lights_on == false) {
    playSound(loadMedia_WebAudio('./sounds/light_on.mp3'), false);
    setMaterialValue('side_lamps', 'side_lamps_Emission', 100);
    setMaterialValue('side_reflectors', 'Map #113_MixAmount', 100);
    side_lights_on = true;
    bloom_optimization();
  } else if (side_lights_on == true) {
    playSound(loadMedia_WebAudio('./sounds/light_off.mp3'), false);
    setMaterialValue('side_lamps', 'side_lamps_Emission', 0);
    setMaterialValue('side_reflectors', 'Map #113_MixAmount', 0);
    side_lights_on = false;
    bloom_optimization();
  }
}, function() {});

right_panels_list = ['coach_colors_list', 'environment_list', 'leather_list', 'rim_list', 'tyre_list', 'glass_list', 'carrier_list', 'mirror_list', 'mat_list', 'nameplate_list'];
current_right_panel = 'coach_colors_list';
markers_visible = true;

setHTMLElemStyle('borderColor', '#f22', ['coach_color_button_11', 'environment_button_1', 'leather_button_1', 'rim_1', 'tyre_1', 'glass_1', 'carrier_1', 'mirror_1', 'mat_1', 'nameplate_1', 'tyre_color_1'], true);

right_panel_hidden = false;
left_panel_hidden = false;

eventHTMLElem('click', 'hide_right_panel_button', true, function(event) {
  if (right_panel_hidden == false) {
    setHTMLElemStyle('marginRight', '-80px', 'right_panel', true);
    setHTMLElemStyle('backgroundImage', 'url(\'./images/hide_panel.svg\')', 'hide_right_panel_button', true);
    right_panel_hidden = true;
  } else if (right_panel_hidden == true) {
    setHTMLElemStyle('marginRight', '0px', 'right_panel', true);
    setHTMLElemStyle('backgroundImage', 'url(\'./images/unhide_panel.svg\')', 'hide_right_panel_button', true);
    right_panel_hidden = false;
  }
});

initFullscreen('custom_fullscreen_button', true, function() {
  setHTMLElemStyle('backgroundImage', 'url(\'./images/fullscreen_2.png\')', 'custom_fullscreen_button', true);
}, function() {
  setHTMLElemStyle('backgroundImage', 'url(\'./images/fullscreen_1.png\')', 'custom_fullscreen_button', true);
}, function() {});

initFullscreen('custom_fullscreen_button_mob', true, function() {
  setHTMLElemStyle('backgroundImage', 'url(\'./images/fullscreen_2.png\')', 'custom_fullscreen_button_mob', true);
}, function() {
  setHTMLElemStyle('backgroundImage', 'url(\'./images/fullscreen_1.png\')', 'custom_fullscreen_button_mob', true);
}, function() {});

eventHTMLElem('click', 'hide_left_panel_button', true, function(event) {
  if (left_panel_hidden == false) {
    setHTMLElemStyle('marginLeft', '-80px', 'left_panel', true);
    setHTMLElemStyle('backgroundImage', 'url(\'./images/unhide_panel.svg\')', 'hide_left_panel_button', true);
    left_panel_hidden = true;
  } else if (left_panel_hidden == true) {
    setHTMLElemStyle('marginLeft', '0px', 'left_panel', true);
    setHTMLElemStyle('backgroundImage', 'url(\'./images/hide_panel.svg\')', 'hide_left_panel_button', true);
    left_panel_hidden = false;
  }
});

eventHTMLElem('click', 'scroll_right_button', true, function(event) {
  setHTMLElemAttribute('scrollLeft', getHTMLElemAttribute('scrollLeft', current_right_panel, true) + 120, current_right_panel, true);
});

eventHTMLElem('click', ['hide_markers_button', 'hide_markers_button_mob'], true, function(event) {
  if (markers_visible == true) {
    changeVis(['GROUP', 'Triggers'], false);
    markers_visible = false;
    setHTMLElemStyle('backgroundImage', 'url(\'./images/icon_show_markers.png\')', 'hide_markers_button', true);
  } else if (markers_visible == false) {
    changeVis(['GROUP', 'Triggers'], true);
    markers_visible = true;
    setHTMLElemStyle('backgroundImage', 'url(\'./images/icon_hide_markers.png\')', 'hide_markers_button', true);
  }
});

eventHTMLElem('click', 'scroll_left_button', true, function(event) {
  setHTMLElemAttribute('scrollLeft', getHTMLElemAttribute('scrollLeft', current_right_panel, true) - 120, current_right_panel, true);
});

eventHTMLElem('click', 'scroll_down_button', true, function(event) {
  setHTMLElemAttribute('scrollTop', getHTMLElemAttribute('scrollTop', current_right_panel, true) + 120, current_right_panel, true);
  console.log('I\'m here!!!');
});

eventHTMLElem('click', ['button_coach', 'button_coach_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'coach_colors_list', true);
  current_right_panel = 'coach_colors_list';
});

eventHTMLElem('click', ['button_frontglass', 'button_frontglass_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'glass_list', true);
  current_right_panel = 'glass_list';
});

eventHTMLElem('click', 'scroll_up_button', true, function(event) {
  setHTMLElemAttribute('scrollTop', getHTMLElemAttribute('scrollTop', current_right_panel, true) - 120, current_right_panel, true);
});

eventHTMLElem('click', ['button_environment', 'button_environment_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'environment_list', true);
  current_right_panel = 'environment_list';
});

eventHTMLElem('click', 'main_scroll_down_button', true, function(event) {
  setHTMLElemAttribute('scrollTop', getHTMLElemAttribute('scrollTop', 'main_buttons_list', true) + 120, 'main_buttons_list', true);
});

eventHTMLElem('click', ['button_carriers', 'button_carriers_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'carrier_list', true);
  current_right_panel = 'carrier_list';
});

eventHTMLElem('click', ['button_leather', 'button_leather_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'leather_list', true);
  current_right_panel = 'leather_list';
});

eventHTMLElem('click', 'main_scroll_up_button', true, function(event) {
  setHTMLElemAttribute('scrollTop', getHTMLElemAttribute('scrollTop', 'main_buttons_list', true) - 120, 'main_buttons_list', true);
});

eventHTMLElem('click', ['button_mirrors', 'button_mirrors_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'mirror_list', true);
  current_right_panel = 'mirror_list';
});

eventHTMLElem('click', 'mobile_scroll_left_button', true, function(event) {
  setHTMLElemAttribute('scrollLeft', getHTMLElemAttribute('scrollLeft', 'mobile_buttons_list', true) - 200, 'mobile_buttons_list', true);
});

eventHTMLElem('click', ['button_rims', 'button_rims_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'rim_list', true);
  current_right_panel = 'rim_list';
});

eventHTMLElem('click', 'mobile_scroll_right_button', true, function(event) {
  setHTMLElemAttribute('scrollLeft', getHTMLElemAttribute('scrollLeft', 'mobile_buttons_list', true) + 200, 'mobile_buttons_list', true);
});

eventHTMLElem('click', ['button_mats', 'button_mats_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'mat_list', true);
  current_right_panel = 'mat_list';
});

eventHTMLElem('click', ['button_tyre', 'button_tyre_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'tyre_list', true);
  current_right_panel = 'tyre_list';
});

eventHTMLElem('click', ['button_nameplate', 'button_nameplate_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'nameplate_list', true);
  current_right_panel = 'nameplate_list';
});

carpaint_animating = false;
current_carpaint_params = [0, 0.06, 0.37, 0, 0.79, 1, 0.4, 0, 1];
new_carpaint_params = [0, 0.06, 0.37, 0, 0.79, 1, 0.4, 0, 1];
leather_parts_list = ['leather_bag', 'seat', 'seat_adds', 'backrest_1', 'backrest_2'];
environment = 'white';
carbon_1 = false;
carbon_2 = false;

eventHTMLElem('click', 'environment_button_1', true, function(event) {
  texture_loading = true;
  environment = 'white';
  setMaterialColor('ground', 'far_color_Color_1', 0.278, 0.278, 0.278, '');
  setMaterialColor('ground', 'far_color_Color_2', 0.212, 0.38, 1, '');
  setMaterialColor('ground', 'ground_ao_Color_2', 0.776, 0.776, 0.776, '');
  setCSSRuleStyle('borderColor', '#2c2c2c', '.right-panel-button-core', true, '');
  setMaterialColor('icons', '<no colors>', 0, 0, 0, '');
  bloom_strength = 0.3;
  bloom_radius = 0.5;
  if (bloom_enabled == true) {
    bloom(bloom_threshhold, bloom_strength, bloom_radius);
  }
  reset_boarder('environment_button', 2, 1);
  replaceTexture('Verge3D_Environment', 'environment_texture', './environment_1.hdr', function() {
    texture_loading = false;
  });
});

eventHTMLElem('click', 'coach_color_button_1', true, function(event) {
  changing_carpaint([0.27, 0.02, 0.58], [0.67, 0.05, 0.23], 1, 0, 1);
  reset_boarder('coach_color_button', 14, 1);
});

eventHTMLElem('click', 'coach_color_button_7', true, function(event) {
  changing_carpaint([0, 0.01, 0.02], [0, 0, 0.01], 0, 1, 0.3);
  reset_boarder('coach_color_button', 14, 7);
});
eventHTMLElem('click', 'coach_color_button_8', true, function(event) {
  changing_carpaint([0.3, 0.18, 0.08], [0.2, 0.11, 0.05], 0, 0.4, 0.1);
  reset_boarder('coach_color_button', 14, 8);
});
eventHTMLElem('click', 'coach_color_button_9', true, function(event) {
  changing_carpaint([0.82, 0, 0], [0.72, 0, 0.02], 0, 0.5, 0);
  reset_boarder('coach_color_button', 14, 9);
});
eventHTMLElem('click', 'coach_color_button_10', true, function(event) {
  changing_carpaint([0.38, 0.82, 0.4], [0.13, 0.65, 0.74], 1, 1.5, 0);
  reset_boarder('coach_color_button', 14, 10);
});
eventHTMLElem('click', 'coach_color_button_11', true, function(event) {
  changing_carpaint([0, 0.06, 0.37], [0, 0.79, 1], 0.4, 2, 0.1);
  reset_boarder('coach_color_button', 14, 11);
});
eventHTMLElem('click', 'coach_color_button_12', true, function(event) {
  changing_carpaint([0.17, 0.17, 0.17], [0.04, 0.04, 0.04], 0.6, 0.9, 0.3);
  reset_boarder('coach_color_button', 14, 12);
});
eventHTMLElem('click', 'coach_color_button_13', true, function(event) {
  changing_carpaint([0.11, 0, 0], [0.03, 0, 0], 0.2, 1.4, 0);
  reset_boarder('coach_color_button', 14, 13);
});
eventHTMLElem('click', 'coach_color_button_14', true, function(event) {
  changing_carpaint([0.02, 0.24, 0], [0, 0.06, 0], 0.4, 1.4, 0);
  reset_boarder('coach_color_button', 14, 14);
});

eventHTMLElem('click', 'environment_button_2', true, function(event) {
  texture_loading = true;
  environment = 'black';
  setMaterialColor('ground', 'far_color_Color_1', 0, 0, 0, '');
  setMaterialColor('ground', 'far_color_Color_2', 0.035, 0.035, 0.071, '');
  setMaterialColor('ground', 'ground_ao_Color_2', 0.35, 0.35, 0.35, '');
  setCSSRuleStyle('borderColor', '#cccccc', '.right-panel-button-core', true, '');
  setMaterialColor('icons', 'Border Color_Color_1', 1, 1, 1, '');
  bloom_radius = 0.6;
  bloom_strength = 0.5;
  if (bloom_enabled == true) {
    bloom(bloom_threshhold, bloom_strength, bloom_radius);
  }
  reset_boarder('environment_button', 2, 2);
  replaceTexture('Verge3D_Environment', 'environment_texture', './environment_2.hdr', function() {
    texture_loading = false;
  });
});

eventHTMLElem('click', 'coach_color_button_2', true, function(event) {
  changing_carpaint([0.55, 0.58, 0.01], [0.23, 0.65, 0], 1, 2, 0);
  reset_boarder('coach_color_button', 14, 2);
});

eventHTMLElem('click', 'coach_color_button_3', true, function(event) {
  changing_carpaint([0.76, 0.35, 0], [0.76, 0.2, 0], 0, 0.5, 0);
  reset_boarder('coach_color_button', 14, 3);
});
eventHTMLElem('click', 'coach_color_button_4', true, function(event) {
  changing_carpaint([0.11, 0.17, 0.3], [0.02, 0.09, 0.24], 0, 0.5, 0.2);
  reset_boarder('coach_color_button', 14, 4);
});
eventHTMLElem('click', 'coach_color_button_5', true, function(event) {
  changing_carpaint([1, 1, 1], [0.7, 0.7, 0.7], 0, 0, 0.5);
  reset_boarder('coach_color_button', 14, 5);
});
eventHTMLElem('click', 'coach_color_button_6', true, function(event) {
  changing_carpaint([0.02, 0.02, 0.02], [0, 0, 0], 0, 1, 0.2);
  reset_boarder('coach_color_button', 14, 6);
});

front_carrier_installed = false;
backpack_1_installed = false;
backpack_2_installed = false;
carriers_list = [['GROUP', 'Carrier 1'], ['GROUP', 'Carrier 2'], ['GROUP', 'Carrier 3']];

eventHTMLElem('click', 'tyre_1', true, function(event) {
  texture_loading = true;
  replaceTexture('tyre', 'tyre_base_rough_ao', './tyre_1_base_rough_ao.jpg', function() {});
  replaceTexture('tyre', 'tyre_normal', './tyre_1_normal.png', function() {
    texture_loading = false;
  });
  reset_boarder('tyre', 5, 1);
});
eventHTMLElem('click', 'tyre_2', true, function(event) {
  texture_loading = true;
  replaceTexture('tyre', 'tyre_base_rough_ao', './tyre_2_base_rough_ao.jpg', function() {});
  replaceTexture('tyre', 'tyre_normal', './tyre_2_normal.png', function() {
    texture_loading = false;
  });
  reset_boarder('tyre', 5, 2);
});
eventHTMLElem('click', 'tyre_3', true, function(event) {
  texture_loading = true;
  replaceTexture('tyre', 'tyre_base_rough_ao', './tyre_3_base_rough_ao.jpg', function() {});
  replaceTexture('tyre', 'tyre_normal', './tyre_3_normal.png', function() {
    texture_loading = false;
  });
  reset_boarder('tyre', 5, 3);
});
eventHTMLElem('click', 'tyre_4', true, function(event) {
  texture_loading = true;
  replaceTexture('tyre', 'tyre_base_rough_ao', './tyre_4_base_rough_ao.jpg', function() {});
  replaceTexture('tyre', 'tyre_normal', './tyre_4_normal.png', function() {
    texture_loading = false;
  });
  reset_boarder('tyre', 5, 4);
});
eventHTMLElem('click', 'tyre_5', true, function(event) {
  texture_loading = true;
  replaceTexture('tyre', 'tyre_base_rough_ao', './tyre_5_base_rough_ao.jpg', function() {});
  replaceTexture('tyre', 'tyre_normal', './tyre_5_normal.png', function() {
    texture_loading = false;
  });
  reset_boarder('tyre', 5, 5);
});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.disposeHTMLElements = function() {
    if (_pGlob) {
        _pGlob.htmlElements.forEach(elem => {
            elem.remove();
        });
        _pGlob.htmlElements.clear();
    }
}

PL.disposeMaterialsCache = function() {
    if (_pGlob) {
        for (const mat of _pGlob.materialsCache.values()) {
            mat.dispose();
        }
        _pGlob.materialsCache.clear();
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    PL.disposeHTMLElements();
    PL.disposeMaterialsCache();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
